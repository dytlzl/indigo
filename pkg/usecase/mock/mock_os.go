// Code generated by MockGen. DO NOT EDIT.
// Source: os.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/dytlzl/indigo/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockOSRepository is a mock of OSRepository interface.
type MockOSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOSRepositoryMockRecorder
}

// MockOSRepositoryMockRecorder is the mock recorder for MockOSRepository.
type MockOSRepositoryMockRecorder struct {
	mock *MockOSRepository
}

// NewMockOSRepository creates a new mock instance.
func NewMockOSRepository(ctrl *gomock.Controller) *MockOSRepository {
	mock := &MockOSRepository{ctrl: ctrl}
	mock.recorder = &MockOSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSRepository) EXPECT() *MockOSRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOSRepository) List(ctx context.Context) ([]domain.OS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.OS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOSRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOSRepository)(nil).List), ctx)
}

// MockOSUseCase is a mock of OSUseCase interface.
type MockOSUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOSUseCaseMockRecorder
}

// MockOSUseCaseMockRecorder is the mock recorder for MockOSUseCase.
type MockOSUseCaseMockRecorder struct {
	mock *MockOSUseCase
}

// NewMockOSUseCase creates a new mock instance.
func NewMockOSUseCase(ctrl *gomock.Controller) *MockOSUseCase {
	mock := &MockOSUseCase{ctrl: ctrl}
	mock.recorder = &MockOSUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSUseCase) EXPECT() *MockOSUseCaseMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOSUseCase) List(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockOSUseCaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOSUseCase)(nil).List), ctx)
}
