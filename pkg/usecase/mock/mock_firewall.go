// Code generated by MockGen. DO NOT EDIT.
// Source: firewall.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/dytlzl/indigo/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockFirewallRepository is a mock of FirewallRepository interface.
type MockFirewallRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallRepositoryMockRecorder
}

// MockFirewallRepositoryMockRecorder is the mock recorder for MockFirewallRepository.
type MockFirewallRepositoryMockRecorder struct {
	mock *MockFirewallRepository
}

// NewMockFirewallRepository creates a new mock instance.
func NewMockFirewallRepository(ctrl *gomock.Controller) *MockFirewallRepository {
	mock := &MockFirewallRepository{ctrl: ctrl}
	mock.recorder = &MockFirewallRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallRepository) EXPECT() *MockFirewallRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFirewallRepository) Create(ctx context.Context, fw *domain.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, fw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFirewallRepositoryMockRecorder) Create(ctx, fw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFirewallRepository)(nil).Create), ctx, fw)
}

// Delete mocks base method.
func (m *MockFirewallRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFirewallRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockFirewallRepository) Get(ctx context.Context, id int) (*domain.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFirewallRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockFirewallRepository) List(ctx context.Context) ([]domain.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFirewallRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallRepository)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockFirewallRepository) Update(ctx context.Context, fw *domain.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, fw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFirewallRepositoryMockRecorder) Update(ctx, fw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFirewallRepository)(nil).Update), ctx, fw)
}

// MockFirewallUsecase is a mock of FirewallUsecase interface.
type MockFirewallUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallUsecaseMockRecorder
}

// MockFirewallUsecaseMockRecorder is the mock recorder for MockFirewallUsecase.
type MockFirewallUsecaseMockRecorder struct {
	mock *MockFirewallUsecase
}

// NewMockFirewallUsecase creates a new mock instance.
func NewMockFirewallUsecase(ctrl *gomock.Controller) *MockFirewallUsecase {
	mock := &MockFirewallUsecase{ctrl: ctrl}
	mock.recorder = &MockFirewallUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallUsecase) EXPECT() *MockFirewallUsecaseMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockFirewallUsecase) Apply(ctx context.Context, fileBody []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, fileBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockFirewallUsecaseMockRecorder) Apply(ctx, fileBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFirewallUsecase)(nil).Apply), ctx, fileBody)
}

// Delete mocks base method.
func (m *MockFirewallUsecase) Delete(ctx context.Context, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFirewallUsecaseMockRecorder) Delete(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFirewallUsecase)(nil).Delete), ctx, target)
}

// Get mocks base method.
func (m *MockFirewallUsecase) Get(ctx context.Context, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockFirewallUsecaseMockRecorder) Get(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirewallUsecase)(nil).Get), ctx, target)
}

// List mocks base method.
func (m *MockFirewallUsecase) List(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFirewallUsecaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirewallUsecase)(nil).List), ctx)
}
