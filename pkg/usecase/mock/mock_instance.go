// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/dytlzl/indigo/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockInstanceRepository is a mock of InstanceRepository interface.
type MockInstanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceRepositoryMockRecorder
}

// MockInstanceRepositoryMockRecorder is the mock recorder for MockInstanceRepository.
type MockInstanceRepositoryMockRecorder struct {
	mock *MockInstanceRepository
}

// NewMockInstanceRepository creates a new mock instance.
func NewMockInstanceRepository(ctrl *gomock.Controller) *MockInstanceRepository {
	mock := &MockInstanceRepository{ctrl: ctrl}
	mock.recorder = &MockInstanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceRepository) EXPECT() *MockInstanceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceRepository) Create(ctx context.Context, name string, planID, osID, regionID, sshKeyID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, planID, osID, regionID, sshKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInstanceRepositoryMockRecorder) Create(ctx, name, planID, osID, regionID, sshKeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceRepository)(nil).Create), ctx, name, planID, osID, regionID, sshKeyID)
}

// List mocks base method.
func (m *MockInstanceRepository) List(ctx context.Context) ([]domain.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInstanceRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceRepository)(nil).List), ctx)
}

// UpdateStatus mocks base method.
func (m *MockInstanceRepository) UpdateStatus(ctx context.Context, id int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockInstanceRepositoryMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockInstanceRepository)(nil).UpdateStatus), ctx, id, status)
}

// MockInstanceUseCase is a mock of InstanceUseCase interface.
type MockInstanceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceUseCaseMockRecorder
}

// MockInstanceUseCaseMockRecorder is the mock recorder for MockInstanceUseCase.
type MockInstanceUseCaseMockRecorder struct {
	mock *MockInstanceUseCase
}

// NewMockInstanceUseCase creates a new mock instance.
func NewMockInstanceUseCase(ctrl *gomock.Controller) *MockInstanceUseCase {
	mock := &MockInstanceUseCase{ctrl: ctrl}
	mock.recorder = &MockInstanceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceUseCase) EXPECT() *MockInstanceUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceUseCase) Create(ctx context.Context, name string, planID, osID, regionID, sshKeyID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, planID, osID, regionID, sshKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInstanceUseCaseMockRecorder) Create(ctx, name, planID, osID, regionID, sshKeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceUseCase)(nil).Create), ctx, name, planID, osID, regionID, sshKeyID)
}

// Delete mocks base method.
func (m *MockInstanceUseCase) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceUseCaseMockRecorder) Delete(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceUseCase)(nil).Delete), ctx, name)
}

// ForceStop mocks base method.
func (m *MockInstanceUseCase) ForceStop(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceStop", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceStop indicates an expected call of ForceStop.
func (mr *MockInstanceUseCaseMockRecorder) ForceStop(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceStop", reflect.TypeOf((*MockInstanceUseCase)(nil).ForceStop), ctx, name)
}

// List mocks base method.
func (m *MockInstanceUseCase) List(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockInstanceUseCaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceUseCase)(nil).List), ctx)
}

// Start mocks base method.
func (m *MockInstanceUseCase) Start(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockInstanceUseCaseMockRecorder) Start(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInstanceUseCase)(nil).Start), ctx, name)
}

// Stop mocks base method.
func (m *MockInstanceUseCase) Stop(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockInstanceUseCaseMockRecorder) Stop(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInstanceUseCase)(nil).Stop), ctx, name)
}
