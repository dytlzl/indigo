// Code generated by MockGen. DO NOT EDIT.
// Source: plan.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/dytlzl/indigo/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPlanRepository is a mock of PlanRepository interface.
type MockPlanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlanRepositoryMockRecorder
}

// MockPlanRepositoryMockRecorder is the mock recorder for MockPlanRepository.
type MockPlanRepositoryMockRecorder struct {
	mock *MockPlanRepository
}

// NewMockPlanRepository creates a new mock instance.
func NewMockPlanRepository(ctrl *gomock.Controller) *MockPlanRepository {
	mock := &MockPlanRepository{ctrl: ctrl}
	mock.recorder = &MockPlanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanRepository) EXPECT() *MockPlanRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPlanRepository) List(ctx context.Context) ([]domain.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlanRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlanRepository)(nil).List), ctx)
}

// MockPlanUseCase is a mock of PlanUseCase interface.
type MockPlanUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPlanUseCaseMockRecorder
}

// MockPlanUseCaseMockRecorder is the mock recorder for MockPlanUseCase.
type MockPlanUseCaseMockRecorder struct {
	mock *MockPlanUseCase
}

// NewMockPlanUseCase creates a new mock instance.
func NewMockPlanUseCase(ctrl *gomock.Controller) *MockPlanUseCase {
	mock := &MockPlanUseCase{ctrl: ctrl}
	mock.recorder = &MockPlanUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanUseCase) EXPECT() *MockPlanUseCaseMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPlanUseCase) List(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPlanUseCaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlanUseCase)(nil).List), ctx)
}
